<?xml version="1.0" encoding="utf-8" ?>
<rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>trailingWhitespace**____</title>
    <atom:link href="http://trailingwhitespace.com/feed.xml" rel="self" type="application/rss+xml"></atom:link>
    <link>http://trailingwhitespace.com</link>
    <description>Thoughts regarding the internet</description>
    <pubDate>Sun, 02 Apr 2017 20:00:00 -0400</pubDate>
    <generator>Wintersmith - https://github.com/jnordberg/wintersmith</generator>
    <language>en</language>
    <item>
      <title>Raspberry Pi 3 Camera and Flask</title>
      <link>http://trailingwhitespace.com/articles/rpi-camera-flask/</link>
      <pubDate>Sun, 02 Apr 2017 20:00:00 -0400</pubDate>
      <guid isPermaLink="true">http://trailingwhitespace.com/articles/rpi-camera-flask/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;img src=&quot;/articles/rpi-camera-flask/images/result.gif&quot; alt=&quot;fog&quot;&gt;&lt;/p&gt;
&lt;p&gt;In an attempt to learn Python, I created a Flask app to control my Raspberry Pi 3 and Pi Camera from my web browser to create time lapses and single photos.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/mimiflynn/rpi-timelapse&quot;&gt;Check out the code on GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;rpi-3-camera&quot;&gt;RPi 3 Camera&lt;/h2&gt;
&lt;p&gt;Attach camera to Pi via ribbon cable and set it up somewhere nice.&lt;/p&gt;
&lt;p&gt;Install latest Raspbian (I used noobs to do this, so easy).&lt;/p&gt;
&lt;h2 id=&quot;raspberry-pi-3-config&quot;&gt;Raspberry Pi 3 Config&lt;/h2&gt;
&lt;p&gt;Go to the Pi menu and click on settings and then go to config&lt;/p&gt;
&lt;p&gt;Open ssh and camera services&lt;/p&gt;
&lt;p&gt;Change host name to rpi3Cam&lt;/p&gt;
&lt;p&gt;Now that SSH is active you must change the default password with &lt;code&gt;passwd&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;set-time-on-pi&quot;&gt;Set Time on Pi&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;sudo dpkg-reconfigure tzdata
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;router-settings&quot;&gt;Router Settings&lt;/h2&gt;
&lt;p&gt;Set up router to reserve ip address via DHCP for the Pi in order to use the same IP address internally for SSH and HTTP access.&lt;/p&gt;
&lt;h2 id=&quot;raspberry-pi-software&quot;&gt;Raspberry Pi Software&lt;/h2&gt;
&lt;p&gt;SSH into RPi and remove unneeded software. I referenced a &lt;a href=&quot;https://project.altservice.com/issues/418&quot;&gt;random BB thread&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get remove --purge wolfram-engine

sudo apt-get remove --purge libreoffice*

sudo apt-get remove --purge libreoffice* wolfram-engine scratch squeak-plugins-scratch squeak-vm penguinspuzzle dillo sonic-pi idle idle3 netsurf-gtk netsurf-common

sudo apt-get autoremove
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Install Vim&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt install vim
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Install NGINX&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt install nginx
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;change ssh port to 20002&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo vim /etc/ssh/sshd_config
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;nginx&quot;&gt;NGINX&lt;/h2&gt;
&lt;pre&gt;&lt;code&gt;cd /etc/nginx/sites-available
sudo vim default
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Use the below configuration:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;server {
    listen 2002 default_server;
    listen [::]:2002 default_server;

    index index.html index.htm index.nginx-debian.html;

    server_name localhost;

    # Set up proxy for Flack app
    location / {
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forward-Fo $proxy_add_x_forwarded_for;
        proxy_set_header Host $http_host;
        proxy_set_header X-Nginx-Proxy true;
        proxy_pass http://127.0.0.1:5000;
        proxy_redirect off;
    }
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;install-and-setup-flask-web-camera-interface&quot;&gt;Install and setup Flask web camera interface&lt;/h2&gt;
&lt;p&gt;Clone the repo into ~/Projects as &lt;code&gt;Photos&lt;/code&gt; and cd into it&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;mkdir ~/Projects &amp;amp;&amp;amp; cd ~/Projects
git clone https://github.com/mimiflynn/rpi-timelapse.git Photos
cd Photos
mkdir {images,gifs}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Start the app with `nohup python3 app.py &amp;amp;’ and go to the server IP address in your browser.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>macOS - i3 on XQuartz</title>
      <link>http://trailingwhitespace.com/articles/i3-xquartz/</link>
      <pubDate>Fri, 06 Jan 2017 19:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://trailingwhitespace.com/articles/i3-xquartz/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;img src=&quot;/articles/i3-xquartz/images/i3-config-wizard-2-big-select.png&quot; alt=&quot;i3 Configuration Wizard&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;installing-i3-on-macos&quot;&gt;Installing i3 on macOS&lt;/h2&gt;
&lt;h3 id=&quot;dependencies&quot;&gt;Dependencies&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://www.xquartz.org&quot;&gt;XQuartz&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://brew.sh&quot;&gt;Homebrew&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;install-i3&quot;&gt;Install i3&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;brew install i3&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;configure-i3-as-default-window-manager-in-xquartz&quot;&gt;Configure i3 as default window manager in XQuartz&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;mkdir ~/.xinitrc.d/
touch ~/.xinitrc.d/99-wm.sh

chmod +x ~/.xinitrc.d/99-wm.sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Open &lt;code&gt;99-wm.sh&lt;/code&gt; in your favorite text editor and add:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;#!/bin/sh
exec /usr/local/bin/i3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;img src=&quot;/articles/i3-xquartz/images/start-xquartz.png&quot; alt=&quot;Start XQuartz&quot;&gt;&lt;/p&gt;
&lt;p&gt;start xQuartz and you will see the following dialog appear from &lt;code&gt;i3-config-wizard&lt;/code&gt; that runs at first start of i3.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/i3-xquartz/images/i3-config-wizard-1.png&quot; alt=&quot;i3 Configuration Wizard&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/i3-xquartz/images/i3-config-wizard-2-big.png&quot; alt=&quot;i3 Configuration Wizard&quot;&gt;&lt;/p&gt;
&lt;p&gt;Now you can configure i3 and your Xquartz apps as you would normally.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Vim commands of note</title>
      <link>http://trailingwhitespace.com/articles/vim/</link>
      <pubDate>Wed, 24 Feb 2016 19:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://trailingwhitespace.com/articles/vim/</guid>
      <author></author>
      <description>&lt;p&gt;Lately, I decided to switch from trusty old Sublime Text 3 to Vim. Why?&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;general&quot;&gt;General&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;:e!&lt;/code&gt; reload file&lt;/p&gt;
&lt;h2 id=&quot;layout&quot;&gt;Layout&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;ctrl+w, v&lt;/code&gt; opens new panel vertically&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl+w, h&lt;/code&gt; opens new panel horizonally&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl+w, w&lt;/code&gt; switches to next panel&lt;/p&gt;
&lt;h2 id=&quot;folding&quot;&gt;Folding&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;zo&lt;/code&gt; open&lt;/p&gt;
&lt;p&gt;&lt;code&gt;zc&lt;/code&gt; close&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://vim.wikia.com/wiki/Folding&quot;&gt;Folding documentation&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;moving-around-a-file&quot;&gt;Moving around a file&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;0&lt;/code&gt; beginning of the line&lt;/p&gt;
&lt;p&gt;&lt;code&gt;^&lt;/code&gt; first non-blank character in a line&lt;/p&gt;
&lt;p&gt;&lt;code&gt;G&lt;/code&gt; end of file&lt;/p&gt;
&lt;p&gt;&lt;code&gt;gg&lt;/code&gt; beggin of file&lt;/p&gt;
&lt;p&gt;&lt;code&gt;H&lt;/code&gt; top of the screen&lt;/p&gt;
&lt;p&gt;&lt;code&gt;M&lt;/code&gt; middle of the screen&lt;/p&gt;
&lt;p&gt;&lt;code&gt;L&lt;/code&gt; bottom of the screen&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://vim.wikia.com/wiki/Moving_around&quot;&gt;Moving around&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;delete&quot;&gt;Delete&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;dw&lt;/code&gt; deletes word&lt;/p&gt;
&lt;p&gt;&lt;code&gt;d$&lt;/code&gt; deletes to the end of the line&lt;/p&gt;
&lt;p&gt;&lt;code&gt;d^&lt;/code&gt; deletes to the beginning of the line&lt;/p&gt;
&lt;p&gt;&lt;code&gt;dit&lt;/code&gt; delete inside tag where cursor is located&lt;/p&gt;
&lt;h2 id=&quot;change&quot;&gt;Change&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;caw&lt;/code&gt; change word&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cas&lt;/code&gt; change sentence&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cb&amp;lt;&lt;/code&gt; replace whole element&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ci&amp;quot;&lt;/code&gt; change inside quote when inside quotes&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://everythingsysadmin.com/2010/09/a-powerful-vim-command-i-never.html&quot;&gt;A powerful vim command I never knew&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;buffer&quot;&gt;Buffer&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;:b 4&lt;/code&gt; go to buffer #4&lt;/p&gt;
&lt;h2 id=&quot;search-and-replace&quot;&gt;Search and Replace&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;:%s/foo/bar/g&lt;/code&gt; Find each occurrence of ‘foo’ (in all lines), and replace it with ‘bar’.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;:s/foo/bar/g&lt;/code&gt; Find each occurrence of ‘foo’ (in the current line only), and replace it with ‘bar’.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;:%s/foo/bar/gc&lt;/code&gt; Change each ‘foo’ to ‘bar’, but ask for confirmation first.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;:%s/\&amp;lt;foo\&amp;gt;/bar/gc&lt;/code&gt; Change only whole words exactly matching ‘foo’ to ‘bar’; ask for confirmation.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://vim.wikia.com/wiki/Search_and_replace&quot;&gt;Search and Replace&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;marks&quot;&gt;Marks&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;:marks&lt;/code&gt; list current marks&lt;/p&gt;
&lt;h3 id=&quot;setting-a-mark&quot;&gt;Setting a mark&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;m&lt;/code&gt; plus a letter to identify the mark so &lt;code&gt;ma&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;deleting-marks&quot;&gt;Deleting marks&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;:delmarks a&lt;/code&gt;    delete mark a&lt;/p&gt;
&lt;h3 id=&quot;jumping-to-a-mark&quot;&gt;Jumping to a mark&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;&amp;#39;a&lt;/code&gt; jump to the first non blank character in the line at mark ‘a’&lt;/p&gt;
&lt;p&gt;&lt;code&gt;\&lt;/code&gt;a` jump to mark&lt;/p&gt;
&lt;h3 id=&quot;modifying-content-in-a-mark&quot;&gt;Modifying content in a mark&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;d&amp;#39;a&lt;/code&gt;    delete from current line to line of mark a&lt;/p&gt;
&lt;p&gt;&lt;code&gt;d&lt;/code&gt;a`    delete from current cursor position to position of mark a&lt;/p&gt;
&lt;p&gt;&lt;code&gt;c&amp;#39;a&lt;/code&gt;    change text from current line to line of mark a&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://vim.wikia.com/wiki/Using_marks&quot;&gt;Marks&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;plugin-specific-notes&quot;&gt;Plugin Specific Notes&lt;/h1&gt;
&lt;h2 id=&quot;cntrl-p&quot;&gt;Cntrl-P&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;fn+f5&lt;/code&gt; refreshed buffer when search panel is open&lt;/p&gt;
&lt;h1 id=&quot;personal-rc-notes&quot;&gt;Personal .*RC notes&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;cntrl+n&lt;/code&gt; Nerdtree&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Xubuntu on MacBook Air</title>
      <link>http://trailingwhitespace.com/articles/linux-desktop/</link>
      <pubDate>Sat, 22  Aug 2015 20:00:00 -0400</pubDate>
      <guid isPermaLink="true">http://trailingwhitespace.com/articles/linux-desktop/</guid>
      <author></author>
      <description>&lt;p&gt;&lt;img src=&quot;/articles/linux-desktop/images/itsalive.png&quot; alt=&quot;Xubuntu&quot;&gt;&lt;/p&gt;
&lt;p&gt;I’ve decided to ‘take the plunge’ and use my old trusty MacBook Air as a single boot Linux box. I got a shiny new MBA, so I figured it could be fun to go ahead and make a ‘beater’ machine out of my old one so I could toss in my bag and skate around town without worrying about ruining my sweet new laptop.&lt;/p&gt;
&lt;p&gt;This is an overview of the things I did to get Xubuntu up and running in a workable fashion on my old MacBook Air (3,1).&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&quot;why-xubuntu-&quot;&gt;Why Xubuntu?&lt;/h2&gt;
&lt;p&gt;I decided against Ubuntu’s default Unity desktop because I worried the 2GB of RAM would be pushed too hard with all the fancy doodads. Mac OS X Yosemite was running rather slow on this 5 year old computer after the last update, so, the little laptop’s age was showing.&lt;/p&gt;
&lt;p&gt;XFCE, the X in Xubuntu, is a lighter weight desktop environment, making it faster, although less polished. No shadows here, but, that’s hardcore, right? Whats the point of running Linux on a tiny laptop other than to be hardcore?!&lt;/p&gt;
&lt;h2 id=&quot;setup&quot;&gt;Setup&lt;/h2&gt;
&lt;h3 id=&quot;install&quot;&gt;Install&lt;/h3&gt;
&lt;p&gt;Before installing, use Disk Utility to make 2 partitions: one for your personal files and one for the operating system. I made my personal file partition larger than the OS partition because I know thats where the bulk of all the things will go. Do what you will, but make your choice wisely because if you want to resize it later, you might just b0rk your machine.&lt;/p&gt;
&lt;p&gt;Anyway, make a bootable USB drive with &lt;a href=&quot;http://xubuntu.org/&quot;&gt;Xubuntu&lt;/a&gt;. I use &lt;a href=&quot;https://unetbootin.github.io/&quot;&gt;UNetbootin&lt;/a&gt;. Just follow the directions and everything should be okay. I use the LTS (Long Term Support) version of the OS (at time of writing, 14.04) because, in my experience, its the most stable. Ubuntu comes out with an LTS every two years and they are pretty solid. If you want to be extra bonus hardcore, you can install the bleeding edge version, but beware that it might cause you more trouble than its worth.&lt;/p&gt;
&lt;p&gt;Luckily, with an old MBA and its limited hardware configurations, you don’t have to  worry about some obscure piece of hardware not being supported. If its a newer MBA, you might have to worry a little more. If its the newest you should probably expect something to not work.&lt;/p&gt;
&lt;p&gt;But, really, its all supposed to be “for fun”.&lt;/p&gt;
&lt;p&gt;Ubuntu has a whole wiki section &lt;a href=&quot;https://wiki.ubuntu.com/MactelSupportTeam/CommunityHelpPages&quot;&gt;to cover “Mactel” things&lt;/a&gt; so check it out before going much farther.&lt;/p&gt;
&lt;p&gt;After you make the USB boot drive, turn off the laptop. Restart while holding down the &lt;code&gt;option&lt;/code&gt; key and it should show you a fancy screen with your Macintosh HD as two drives and a yellow bootable USB drive. Pick the USB drive… unless you want to go back to OS X, which you don’t because you are trying to install Linux.&lt;/p&gt;
&lt;p&gt;You &lt;em&gt;should&lt;/em&gt; get a screen that asks if you want to install Linux or try it out. Do what you want, but when you feel ready, select install and follow all the directions. At some point very soon to the beginning, it will ask what you want to do with all your partitions. Pick the partition you want to install the OS onto and move on.&lt;/p&gt;
&lt;p&gt;You’ll be asked to create a username and password and whether or not you want your home directory to be encrypted. It will also ask you (either before or after the username thing, I don’t remember) if you want to install updates and 3rd party software all at the same time. Select those options, its convenient.&lt;/p&gt;
&lt;p&gt;When its all done, restart and behold your new OS.&lt;/p&gt;
&lt;h3 id=&quot;keep-your-home-directory-in-a-separate-partition&quot;&gt;Keep your /home directory in a separate partition&lt;/h3&gt;
&lt;p&gt;This is where that partition you made earlier comes in handy. Keeping your /home directory in a separate partition means you can re-install the OS if you happen to break anything and not have to worry about your personal configuration files and other such important things. It’ll all be there, waiting for that bleeding edge version of Xubuntu to greet it upon login.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://help.ubuntu.com/community/Partitioning/Home/Moving&quot;&gt;Follow these directions super carefully&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can play around with the OS and try to customize it and stuff right away, but I suggest you move your /home directory first. Its faster to do it now because your /home is fresh and new.&lt;/p&gt;
&lt;h3 id=&quot;disable-trackpad-when-using-keyboard&quot;&gt;Disable trackpad when using keyboard&lt;/h3&gt;
&lt;p&gt;When using OS X, you’ve never had to worry about losing cursor focus due to a slight brush of your palm on the trackpad. That’s quality. Xubuntu is free software that allows a user to configure it all they want, which means you have to think about things like this.&lt;/p&gt;
&lt;p&gt;But, as free software that anyone can work on, some brilliant dev somewhere was plagued with this trackpad typing focus bug and created a fix.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/articles/linux-desktop/images/touchpad.png&quot; alt=&quot;Touchpad settings&quot;&gt;&lt;/p&gt;
&lt;p&gt;Go to the ‘Whisker Menu’ (the little mouse at the top left side of the screen), click on ‘Settings’ to the bottom-ish right of the menu, and then select ‘Mouse and Touchpad’. Look over the ‘Buttons and Feedback’ tab and tweak as you want, then select the ‘Touchpad’ tab and check ‘Disable touchpad while typing’. Overtime, you might need to adjust the ‘Duration’ until it feels right to you.&lt;/p&gt;
&lt;h3 id=&quot;keyboard-shortcuts&quot;&gt;Keyboard shortcuts&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;/articles/linux-desktop/images/keyboard.png&quot; alt=&quot;Keyboard settings&quot;&gt;&lt;/p&gt;
&lt;p&gt;All keyboard shortcuts are customizable via the Keyboard section of Settings (in the Whisker menu like above, OR just hit Super+r and type in ‘keyboard’). Hit ‘+add’ to make a new shortcut, or ‘edit’ to change an existing one, or ‘delete’ if you hate one. When addng, it will prompt you to type in the command you want it to run. (What is this?! What does it mean?! How are you supposed to know what commands are available?!) Enter the command you want and hit ‘OK’ and it will ask you to hit the keyboard shortcut combo you want to use to run that command. Easy peasy.&lt;/p&gt;
&lt;p&gt;Its important to node that the command / apple key is the ‘Super’ key.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;option+tab&lt;/code&gt; - switch open apps&lt;/p&gt;
&lt;p&gt;&lt;code&gt;super+r&lt;/code&gt; - much like Spotlight&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ctrl+tab&lt;/code&gt; - switch between open tabs&lt;/p&gt;
&lt;h3 id=&quot;cli-commands-to-note&quot;&gt;CLI commands to note&lt;/h3&gt;
&lt;p&gt;Open current working directory &lt;code&gt;thunar .&lt;/code&gt; in the file manager GUI.&lt;/p&gt;
&lt;p&gt;Also, of course, &lt;code&gt;sudo apt-get install &amp;lt;something&amp;gt;&lt;/code&gt;, but that will have to be a &lt;a href=&quot;http://lmgtfy.com/?q=ubuntu+apt-get+install&quot;&gt;Google search for you&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&quot;xfce-theme-manager&quot;&gt;XFCE theme manager&lt;/h3&gt;
&lt;p&gt;You can make Xubuntu look awesome, or horrible, its all &lt;a href=&quot;http://www.webupd8.org/2013/06/xfce-theme-manager-single-gui-to-change.html&quot;&gt;up to you&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;applications&quot;&gt;Applications&lt;/h2&gt;
&lt;p&gt;Sometimes, you’ll want to download something familiar and useful that isn’t included in the software center or apt-get. For example, lets say you want to install Dropbox and it tells you to install something called a &lt;code&gt;.deb&lt;/code&gt;, go for it. Just download it and run it in the software center app.&lt;/p&gt;
&lt;p&gt;NOTE - chrome is available like this and is kind of buggy. I currently changed my ‘Web Browser’ shortcut to run &lt;code&gt;google-chrome --disable-gpu&lt;/code&gt; in order to avoid weird GPU things.&lt;/p&gt;
&lt;h2 id=&quot;power-optimizations&quot;&gt;Power optimizations&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/articles/linux-desktop/images/powertop-tuneables.png&quot; alt=&quot;Powertop&quot;&gt;&lt;/p&gt;
&lt;p&gt;Installing &lt;code&gt;powertop&lt;/code&gt; and &lt;code&gt;laptop-mode-tools&lt;/code&gt; has made a huge difference in battery life, to the point where the old battery in this machine is running for as long as it did with OS X: 2.5 hours. I know, thats barely any time, but if I needed 8 hours of battery life, I would just bring my other, less hacky MBA.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo apt-get install powertop laptop-mode-tools
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Go ahead and run &lt;code&gt;powertop&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;sudo powertop
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;and tab through to ‘Tunables’ and hit &lt;code&gt;enter&lt;/code&gt; when you find something that appears to need tuning.&lt;/p&gt;
&lt;h2 id=&quot;development&quot;&gt;Development&lt;/h2&gt;
&lt;p&gt;To be truely hardcore, and really to do any work on Github repos you will need to &lt;a href=&quot;https://help.github.com/articles/generating-ssh-keys/&quot;&gt;authenticate Github via SSH&lt;/a&gt;. You’ll need to install SSH first, though, with &lt;code&gt;sudo apt-get install ssh&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Sublime Text 3 is available as a &lt;code&gt;.deb&lt;/code&gt; and works exactly as it does everywhere.&lt;/p&gt;
&lt;p&gt;Jetbrains has its IDE’s available as well, if you have a license for some of their goodness.&lt;/p&gt;
&lt;p&gt;Naturally, you could just Vim or Emacs like a pro with some tmux thrown in.&lt;/p&gt;
</description>
    </item>
    <item>
      <title>Stepping Up Your JS Skills</title>
      <link>http://trailingwhitespace.com/articles/stepping-up-js-skills/</link>
      <pubDate>Wed, 26 Feb 2014 19:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://trailingwhitespace.com/articles/stepping-up-js-skills/</guid>
      <author></author>
      <description>&lt;p&gt;Lets say you’re a front-end developer that has historically worked on marketing sites. You can make dropdown menus, modal pop-ups, animate hover states, create slideshows, etc. jQuery, with its large base of plugins, is your best friend. You’ve never written a jQuery plugin and do not fully understand what they are and how they work within the terms of Javascript.&lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;The most complicated ‘app’ aspect of the marketing sites you’ve created are the search and contact forms and those were mostly managed by a CMS. You want a new job but all the new jobs are looking for front-end developers that build applications with complex interactions and huge Javascript codebases. The couple of interviews you’ve recently had were bad and a little embarrassing, but you feel confident in your knowledge of Javascript and your ability to learn more.&lt;/p&gt;
&lt;p&gt;What do you need to do to step up your JS skills?&lt;/p&gt;
&lt;h2 id=&quot;read&quot;&gt;Read&lt;/h2&gt;
&lt;p&gt;It’s hard to know where to start because you don’t know what you don’t know. Simply reading about Javascript is a great way to fill in the gaps. There are plently of free references online:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://leanpub.com/javascript-allonge/read&quot;&gt;Javascript Allonge&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide&quot;&gt;Mozilla Developer Network JS Guide&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Reading can be taken to a whole other level, though. Don’t just read books about Javascript, but, as you get to understand JS more and more through technical book, start to look at the code of the tools you currently use and look up what you don’t understand in the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference&quot;&gt;Mozilla Developer JS reference site&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;use-the-console&quot;&gt;Use the console&lt;/h2&gt;
&lt;p&gt;The Chrome console is an excellent space to test out your new JS skills.&lt;/p&gt;
&lt;p&gt;For example, lets say you see this code:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;findWhere&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;objArray, find, where, is&lt;/span&gt;) &lt;/span&gt;{

    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;'find '&lt;/span&gt; + find + &lt;span class=&quot;string&quot;&gt;' where '&lt;/span&gt; + where + &lt;span class=&quot;string&quot;&gt;' is '&lt;/span&gt; + is);

    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; asw = &lt;span class=&quot;string&quot;&gt;''&lt;/span&gt;;

    objArray.forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;element, index, array&lt;/span&gt;) &lt;/span&gt;{

        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (element[where] === is) {
            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(element[find]);
            asw = element[find];
        }

    });

    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; asw;
}

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; groupMembers= [{
        name: &lt;span class=&quot;string&quot;&gt;'Jane Preston'&lt;/span&gt;,
        location: &lt;span class=&quot;string&quot;&gt;'Boise, Idaho'&lt;/span&gt;
    }, {
        name: &lt;span class=&quot;string&quot;&gt;'Jonathan Maxwell'&lt;/span&gt;,
        location: &lt;span class=&quot;string&quot;&gt;'Manhattan, Kansas'&lt;/span&gt;
    },{
        name: &lt;span class=&quot;string&quot;&gt;'Harper Ferry'&lt;/span&gt;,
        location: &lt;span class=&quot;string&quot;&gt;'Atlanta, Georgia'&lt;/span&gt;
    }];

&lt;span class=&quot;comment&quot;&gt;// outputs name of person that is located in Atlanta, Georgia&lt;/span&gt;
findWhere(groupMembers, &lt;span class=&quot;string&quot;&gt;'name'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'location'&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;'Atlanta, Georgia'&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Lets say &lt;code&gt;.foreach&lt;/code&gt; is something you’ve not seen before, &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach&quot;&gt;go ahead and look it up&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Then, lets say you want to play with &lt;code&gt;.forEach&lt;/code&gt; a little bit to get a better understanding of it. Open up the console in your browser, copy and paste the above function, and dream up interesting ways in which you would need to use it.&lt;/p&gt;
&lt;h2 id=&quot;codewars-and-other-js-code-fun&quot;&gt;Codewars and other JS code fun&lt;/h2&gt;
&lt;p&gt;A great way to review and learn more about Javascript fundamentals is through &lt;a href=&quot;http://codewars.com&quot;&gt;Codewars&lt;/a&gt;. Sign up and do all the ‘kata’ that you can. If you Google something and use it to get through a ‘kata’ be sure you understand why it works. Don’t be lazy about this understanding. It’s really going to help once you get to writing code for real projects with real teams.&lt;/p&gt;
&lt;p&gt;If you are a complete beginner, check out &lt;a href=&quot;http://codecombat.com/&quot;&gt;Code Combat&lt;/a&gt;. It makes a game of learning to code.&lt;/p&gt;
&lt;h2 id=&quot;don-t-be-afraid-of-the-command-line&quot;&gt;Don’t be afraid of the command line&lt;/h2&gt;
&lt;p&gt;A lot of the javascript frameworks that are being distributed and developed these days require that you not be afraid of the command line–or at the least can deal with your fear enough to use it.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://nodejs.org/&quot;&gt;NodeJS&lt;/a&gt; is javascript that runs in the command line and can even be used as a server backend. Install it and write command line scripts that do simple every day things like searching and replacing words in a text file, so that you can better understand how it works.&lt;/p&gt;
&lt;h2 id=&quot;-i-keep-getting-this-question-about-closures-&quot;&gt;‘I keep getting this question about closures’&lt;/h2&gt;
&lt;p&gt;Scope is a big deal. If you don’t understand the scope of a variable in Javascript, you will run into all kinds of bugs that feel like phantoms.&lt;/p&gt;
&lt;p&gt;Learn how to use &lt;code&gt;.call&lt;/code&gt; and &lt;code&gt;.apply&lt;/code&gt; and &lt;code&gt;.bind&lt;/code&gt; and why they are necessary.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;{
    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; args = &lt;span class=&quot;built_in&quot;&gt;Array&lt;/span&gt;.prototype.slice.call(&lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;);
    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log.apply(&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;, args);
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; stuff = {
    line : &lt;span class=&quot;string&quot;&gt;'say these things'&lt;/span&gt;,
    say :  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;) &lt;/span&gt;{
        &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(name + &lt;span class=&quot;string&quot;&gt;' '&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.line);
    }
}

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; things = {
    line: &lt;span class=&quot;string&quot;&gt;'other things'&lt;/span&gt;
}

stuff.say.call(things, &lt;span class=&quot;string&quot;&gt;'mimi'&lt;/span&gt;);

&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; other = stuff.say.bind(stuff);

other(&lt;span class=&quot;string&quot;&gt;'someone needs to'&lt;/span&gt;);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Learn about prototypical inheritance&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Learn about variable scope (hoisting, &lt;code&gt;this&lt;/code&gt;, &lt;code&gt;.call&lt;/code&gt; and &lt;code&gt;.apply&lt;/code&gt; and &lt;code&gt;.bind&lt;/code&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Understand why the JS tools and frameworks you use work, what problem they were created to fix, and what alternatives are available.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;modular-javascript&quot;&gt;Modular Javascript&lt;/h2&gt;
&lt;p&gt;Modern Javascript requires a lot of code. In order to organize and maintain that code, functionality can be organized into modules that can be easily reused.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://addyosmani.com/writing-modular-js/&quot;&gt;Writing Modular Javascript with AMD, CommonJS and ES Harmony&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://dailyjs.com/2012/06/25/this-binding/&quot;&gt;Call, Apply, and Bind&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://ejohn.org/apps/learn/&quot;&gt;Learning Advanced Javascript&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://addyosmani.com/resources/essentialjsdesignpatterns/book/&quot;&gt;Javascript Design Patterns&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://medium.com/p/ce6da2d324fe&quot;&gt;Currying in Javascript&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    <item>
      <title>The Free Mac Tools I Use Daily</title>
      <link>http://trailingwhitespace.com/articles/free-tools-i-use/</link>
      <pubDate>Sun, 23 Feb 2014 19:00:00 -0500</pubDate>
      <guid isPermaLink="true">http://trailingwhitespace.com/articles/free-tools-i-use/</guid>
      <author></author>
      <description>&lt;p&gt;These are the free Mac desktop tools I use daily for tasks like drafting blogs to managing servers and building apps. &lt;/p&gt;
&lt;p&gt;&lt;span class=&quot;more&quot;&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;I normally use a Mac, so a few of these tools are pretty Mac-centric.&lt;/p&gt;
&lt;h2 id=&quot;mou&quot;&gt;Mou&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://mouapp.com/&quot;&gt;Mou&lt;/a&gt; is a markdown editor that gives you a preview in real time and allows you to edit your &lt;code&gt;.md&lt;/code&gt; files with beautiful syntax highlighting.&lt;/p&gt;
&lt;h2 id=&quot;iterm-2&quot;&gt;iTerm 2&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://www.iterm2.com/&quot;&gt;iTerm 2&lt;/a&gt; is one of the first apps I install when I set up a new Mac. I love the split pane and that can go between tabs with command+arrow keys. The tab Expose helps me keep track of sessions. Growl keeps me updated with bells and issues. It’s really quite wonderful.&lt;/p&gt;
&lt;h2 id=&quot;adium&quot;&gt;Adium&lt;/h2&gt;
&lt;p&gt;I use &lt;a href=&quot;http://adium.im&quot;&gt;Adium&lt;/a&gt; for most of my chat needs (if it supported Skype and I didn’t have friends that only used Skype it would be ‘the one’). I can be connected to multiple chat servers (XMPP and Google Chat) and keep all the live chats open in a wonderful tabbed interface. By default it supports encryption, so I can chat away with my more paranoid friends.&lt;/p&gt;
&lt;h2 id=&quot;spf13-vim-and-macvim&quot;&gt;SPF13 Vim and MacVim&lt;/h2&gt;
&lt;p&gt;Vim isn’t Mac centric, although, I do use &lt;a href=&quot;https://code.google.com/p/macvim/&quot;&gt;MacVim&lt;/a&gt; for the copying and pasting and overall gui goodness.&lt;/p&gt;
&lt;p&gt;For a long time, I was configuring Vim on my own. I was updating &lt;code&gt;.vimrc&lt;/code&gt; and &lt;code&gt;.gvimrc&lt;/code&gt; files constantly, researching and installing plugins, trying to make it work for everything always. Then, one day, I decided to try out the curated and tested configuration that &lt;a href=&quot;http://vim.spf13.com/&quot;&gt;SPF13-Vim&lt;/a&gt; provides, created a &lt;code&gt;.vimrc.local&lt;/code&gt; and &lt;code&gt;.gvimrc.local&lt;/code&gt; and never looked back.&lt;/p&gt;
&lt;p&gt;If you are so inclined, feel free to check out my &lt;a href=&quot;https://gist.github.com/mimiflynn/9144157#file-vimrc-local&quot;&gt;SPF13 Vim configuration&lt;/a&gt; and &lt;a href=&quot;https://gist.github.com/mimiflynn/9144157#file-gvimrc-local&quot;&gt;SPF13 Vim MacVim configuration&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
  </channel>
</rss>